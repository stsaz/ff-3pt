From 69ff65fcb5304ccfa26e027890b8a23b2c9da17d Mon Sep 17 00:00:00 2001
From: Simon Zolin <stsaz@yandex.ru>
Date: Sun, 7 Jan 2018 10:30:19 +0300
Subject: [PATCH 2/2] new encoder interface

---
 src/libFLAC/stream_encoder.c | 90 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 86 insertions(+), 4 deletions(-)

diff --git a/src/libFLAC/stream_encoder.c b/src/libFLAC/stream_encoder.c
index 037b8cb..9ab8d6c 100644
--- a/src/libFLAC/stream_encoder.c
+++ b/src/libFLAC/stream_encoder.c
@@ -66,6 +66,7 @@
 #include "private/window.h"
 #include "share/alloc.h"
 #include "share/private.h"
+#include <FLAC-ff.h>
 
 
 /* Exact Rice codeword length calculation is off by default.  The simple
@@ -587,9 +588,12 @@ FLAC_API void FLAC__stream_encoder_delete(FLAC__StreamEncoder *encoder)
 	encoder->private_->is_being_deleted = true;
 
 	(void)FLAC__stream_encoder_finish(encoder);
+	free_(encoder);
 
+#if 0
 	if(0 != encoder->private_->verify.decoder)
 		FLAC__stream_decoder_delete(encoder->private_->verify.decoder);
+#endif
 
 	for(i = 0; i < FLAC__MAX_CHANNELS; i++) {
 		FLAC__format_entropy_coding_method_partitioned_rice_contents_clear(&encoder->private_->partitioned_rice_contents_workspace[i][0]);
@@ -636,8 +640,10 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	if(FLAC__HAS_OGG == 0 && is_ogg)
 		return FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER;
 
+#if 0
 	if(0 == write_callback || (seek_callback && 0 == tell_callback))
 		return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
+#endif
 
 	if(encoder->protected_->channels == 0 || encoder->protected_->channels > FLAC__MAX_CHANNELS)
 		return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS;
@@ -740,6 +746,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	if(encoder->protected_->min_residual_partition_order >= encoder->protected_->max_residual_partition_order)
 		encoder->protected_->min_residual_partition_order = encoder->protected_->max_residual_partition_order;
 
+#if 0
 #if FLAC__HAS_OGG
 	/* reorder metadata if necessary to ensure that any VORBIS_COMMENT is the first, according to the mapping spec */
 	if(is_ogg && 0 != encoder->protected_->metadata && encoder->protected_->num_metadata_blocks > 1) {
@@ -818,6 +825,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 			}
 		}
 	}
+#endif
 
 	encoder->private_->input_capacity = 0;
 	for(i = 0; i < encoder->protected_->channels; i++) {
@@ -1096,6 +1104,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 		return FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR;
 	}
 
+#if 0
 	/*
 	 * Set up the verify stuff if necessary
 	 */
@@ -1135,6 +1144,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	encoder->private_->verify.error_stats.sample = 0;
 	encoder->private_->verify.error_stats.expected = 0;
 	encoder->private_->verify.error_stats.got = 0;
+#endif
 
 	/*
 	 * These must be done before we write any metadata, because that
@@ -1146,6 +1156,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	encoder->protected_->seektable_offset = 0;
 	encoder->protected_->audio_offset = 0;
 
+#if 0
 	/*
 	 * write the stream header
 	 */
@@ -1165,6 +1176,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	 */
 	if(encoder->protected_->verify)
 		encoder->private_->verify.state_hint = ENCODER_IN_METADATA;
+#endif
 	encoder->private_->streaminfo.type = FLAC__METADATA_TYPE_STREAMINFO;
 	encoder->private_->streaminfo.is_last = false; /* we will have at a minimum a VORBIS_COMMENT afterwards */
 	encoder->private_->streaminfo.length = FLAC__STREAM_METADATA_STREAMINFO_LENGTH;
@@ -1179,6 +1191,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	memset(encoder->private_->streaminfo.data.stream_info.md5sum, 0, 16); /* we don't know this yet; have to fill it in later */
 	if(encoder->protected_->do_md5)
 		FLAC__MD5Init(&encoder->private_->md5context);
+#if 0
 	if(!FLAC__add_metadata_block(&encoder->private_->streaminfo, encoder->private_->frame)) {
 		encoder->protected_->state = FLAC__STREAM_ENCODER_FRAMING_ERROR;
 		return FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR;
@@ -1187,6 +1200,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 		/* the above function sets the state for us in case of an error */
 		return FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR;
 	}
+#endif
 
 	/*
 	 * Now that the STREAMINFO block is written, we can init this to an
@@ -1196,6 +1210,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 	/* ... and clear this to 0 */
 	encoder->private_->streaminfo.data.stream_info.total_samples = 0;
 
+#if 0
 	/*
 	 * Check to see if the supplied metadata contains a VORBIS_COMMENT;
 	 * if not, we will write an empty one (FLAC__add_metadata_block()
@@ -1248,6 +1263,7 @@ static FLAC__StreamEncoderInitStatus init_stream_internal_(
 
 	if(encoder->protected_->verify)
 		encoder->private_->verify.state_hint = ENCODER_IN_AUDIO;
+#endif
 
 	return FLAC__STREAM_ENCODER_INIT_STATUS_OK;
 }
@@ -1439,12 +1455,14 @@ FLAC_API FLAC__bool FLAC__stream_encoder_finish(FLAC__StreamEncoder *encoder)
 {
 	FLAC__bool error = false;
 
+#if 0
 	FLAC__ASSERT(0 != encoder);
 	FLAC__ASSERT(0 != encoder->private_);
 	FLAC__ASSERT(0 != encoder->protected_);
 
 	if(encoder->protected_->state == FLAC__STREAM_ENCODER_UNINITIALIZED)
 		return true;
+#endif
 
 	if(encoder->protected_->state == FLAC__STREAM_ENCODER_OK && !encoder->private_->is_being_deleted) {
 		if(encoder->private_->current_sample_number != 0) {
@@ -1458,6 +1476,7 @@ FLAC_API FLAC__bool FLAC__stream_encoder_finish(FLAC__StreamEncoder *encoder)
 	if(encoder->protected_->do_md5)
 		FLAC__MD5Final(encoder->private_->streaminfo.data.stream_info.md5sum, &encoder->private_->md5context);
 
+#if 0
 	if(!encoder->private_->is_being_deleted) {
 		if(encoder->protected_->state == FLAC__STREAM_ENCODER_OK) {
 			if(encoder->private_->seek_callback) {
@@ -1496,6 +1515,7 @@ FLAC_API FLAC__bool FLAC__stream_encoder_finish(FLAC__StreamEncoder *encoder)
 
 	free_(encoder);
 	set_defaults_(encoder);
+#endif
 
 	if(!error)
 		encoder->protected_->state = FLAC__STREAM_ENCODER_UNINITIALIZED;
@@ -2150,11 +2170,13 @@ FLAC_API FLAC__bool FLAC__stream_encoder_process(FLAC__StreamEncoder *encoder, c
 	FLAC__ASSERT(0 != encoder->protected_);
 	FLAC__ASSERT(encoder->protected_->state == FLAC__STREAM_ENCODER_OK);
 
-	do {
+	// do {
 		const unsigned n = flac_min(blocksize+OVERREAD_-encoder->private_->current_sample_number, samples-j);
 
+#if 0
 		if(encoder->protected_->verify)
 			append_to_verify_fifo_(&encoder->private_->verify.input_fifo, buffer, j, channels, n);
+#endif
 
 		for(channel = 0; channel < channels; channel++) {
 			if (buffer[channel] == NULL) {
@@ -2181,7 +2203,7 @@ FLAC_API FLAC__bool FLAC__stream_encoder_process(FLAC__StreamEncoder *encoder, c
 			FLAC__ASSERT(encoder->private_->current_sample_number == blocksize+OVERREAD_);
 			FLAC__ASSERT(OVERREAD_ == 1); /* assert we only overread 1 sample which simplifies the rest of the code below */
 			if(!process_frame_(encoder, /*is_fractional_block=*/false, /*is_last_block=*/false))
-				return false;
+				return -1;
 			/* move unprocessed overread samples to beginnings of arrays */
 			for(channel = 0; channel < channels; channel++)
 				encoder->private_->integer_signal[channel][0] = encoder->private_->integer_signal[channel][blocksize];
@@ -2191,9 +2213,9 @@ FLAC_API FLAC__bool FLAC__stream_encoder_process(FLAC__StreamEncoder *encoder, c
 			}
 			encoder->private_->current_sample_number = 1;
 		}
-	} while(j < samples);
+	// } while(j < samples);
 
-	return true;
+	return j;
 }
 
 FLAC_API FLAC__bool FLAC__stream_encoder_process_interleaved(FLAC__StreamEncoder *encoder, const FLAC__int32 buffer[], unsigned samples)
@@ -3086,6 +3108,7 @@ FLAC__bool process_frame_(FLAC__StreamEncoder *encoder, FLAC__bool is_fractional
 		return false;
 	}
 
+#if 0
 	/*
 	 * Write it
 	 */
@@ -3093,6 +3116,7 @@ FLAC__bool process_frame_(FLAC__StreamEncoder *encoder, FLAC__bool is_fractional
 		/* the above function sets the state for us in case of an error */
 		return false;
 	}
+#endif
 
 	/*
 	 * Get ready for the next frame
@@ -4547,3 +4571,61 @@ FILE *get_binary_stdout_(void)
 
 	return stdout;
 }
+
+
+int _flac_encode_init(FLAC__StreamEncoder *enc, flac_conf *conf)
+{
+	int r;
+
+	enc->protected_->bits_per_sample = conf->bps;
+	enc->protected_->channels = conf->channels;
+	enc->protected_->sample_rate = conf->rate;
+	enc->protected_->do_md5 = !conf->nomd5;
+	FLAC__stream_encoder_set_compression_level(enc, conf->level);
+
+	if (0 != (r = init_stream_internal_(enc, NULL, NULL, NULL, NULL, NULL, NULL, 0))) {
+		int e;
+		if (r == FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR)
+			e = FLAC_ERR(FLAC_E_WSTATE, enc->protected_->state);
+		else
+			e = FLAC_ERR(FLAC_E_WINIT, r);
+		return e;
+	}
+
+	return 0;
+}
+
+FLAC__StreamMetadata_StreamInfo* _flac_encode_info(FLAC__StreamEncoder *enc)
+{
+	return &enc->private_->streaminfo.data.stream_info;
+}
+
+int _flac_encode(FLAC__StreamEncoder *enc, const int * const *audio, unsigned int *samples, char **buf)
+{
+	int n;
+	const FLAC__byte *out_buffer;
+	size_t bytes;
+
+	if (*samples != 0) {
+		n = FLAC__stream_encoder_process(enc, audio, *samples);
+		if (n == -1)
+			return FLAC_ERR(FLAC_E_WSTATE, enc->protected_->state);
+
+	} else {
+		n = enc->private_->current_sample_number;
+		FLAC__stream_encoder_finish(enc);
+	}
+
+	if (!FLAC__bitwriter_get_buffer(enc->private_->frame, &out_buffer, &bytes))
+		return FLAC_ERR(FLAC_E_WSTATE, FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR);
+	FLAC__bitwriter_clear(enc->private_->frame);
+
+	if (bytes != 0) {
+		enc->private_->streaminfo.data.stream_info.min_framesize = flac_min(bytes, enc->private_->streaminfo.data.stream_info.min_framesize);
+		enc->private_->streaminfo.data.stream_info.max_framesize = flac_max(bytes, enc->private_->streaminfo.data.stream_info.max_framesize);
+	}
+
+	*buf = (void*)out_buffer;
+	*samples = n;
+	return bytes;
+}
-- 
2.8.1.windows.1

